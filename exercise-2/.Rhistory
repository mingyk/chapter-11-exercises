# Install and load the "dplyr" library
install.packages("dplyr")
library("dplyr")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
vector1 <- select(vehicles, makes)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
View(vehicles)
# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
vector1 <- select(vehicles, makes)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
vector1 <- select(vehicles, make)
vector1
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct(vector1)
# Filter the data set for vehicles manufactured in 1997
filter1 <- select(vehicles, year == 1997)
# Filter the data set for vehicles manufactured in 1997
filter1 <- filter(vehicles, year == 1997)
filter1
# Arrange the 1997 cars by highway (`hwy`) gas milage
arrange(filter1, hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
mutate(filter1, average = (hwy + cty) / 2)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
mutate(filter1, average = (hwy + cty) / 2)
filter1
filter1
# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
library("dplyr")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
vector1 <- select(vehicles, make)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct(vector1)
# Filter the data set for vehicles manufactured in 1997
filter1 <- filter(vehicles, year == 1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
arrange(filter1, hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
mutate(filter1, average = (hwy + cty) / 2)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
filter(vehicles, drive == "2-Wheel Drive", hwy > 20)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vector2 <- filter(vehicles, drive == "2-Wheel Drive", hwy > 20)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(vecor2, min(hwy))
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(vector2, min(hwy))
min(hwy)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(vector2, min("hwy"))
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(vector2, hwy = min(hwy))
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(vector2, hwy == min(hwy))
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(vector2, hwy == min(hwy), )
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(vector2, hwy == min(hwy), )
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(vector2, hwy == min(hwy)# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(vector2, hwy == min(hwy))
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(vector2, hwy == min(hwy))
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(vector2, hwy == min(hwy), )
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(vector2, hwy == min(hwy), 1)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(vector2, hwy == min(hwy), id)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(vector2, hwy == min(hwy), id)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(vector2, hwy) %>% summarize(hwy = n()) %>% filter(hwy == max(hwy)) %>% select(id)
filter(vector2, hwy)
summarize(hwy = n())
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
vector2 %>% filter(hwy) %>% summarize(hwy = n()) %>% filter(hwy == max(hwy)) %>% select(id)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
save <- vector2 %>% filter(hwy) %>% summarize(hwy = n()) %>% filter(hwy == max(hwy)) %>% select(id)
save <- vector2 %>%
group_by(id) %>%
filter(hwy) %>%
summarize(hwy = n()) %>%
filter(hwy == max(hwy)) %>%
select(id)
save <- vector2 %>%
group_by(id) %>%
filter(hwy) %>%
summarize(hwympg = n()) %>%
filter(hwympg == max(hwympg)) %>%
select(id)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
save1 <- filter(vector2, hwy == min(hwy))
pull(save1, id)
pull(filter(vector2, hwy == min(hwy)), id)
function_1 <- function(year_choice, make_choice){
filter95 <- vehicles[vehicles["make"] == "Honda" & vehicles["year"] == 1995, ]
return <- filter95[max(filter95["hwy"]), 2]
return(return)
}
# What was the most efficient Honda model of 1995?
function_1(1995, "Honda")
function1 <- function1(year_choice, make_choice){
filter95 <- filter(vehicles, make == "Honda", year == 1995)
return <- pull(filter(filter95, hwy == max(hwy)), id)
return(return)
}
function1 <- function(year_choice, make_choice){
filter95 <- filter(vehicles, make == "Honda", year == 1995)
return <- pull(filter(filter95, hwy == max(hwy)), id)
retu
# What was the most efficient Honda model of 1995?
function1(1995, "Honda")
# What was the most efficient Honda model of 1995?
function1(1995, "Honda")
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
pull(filter(vector2, hwy == min(hwy)), id)
# Exercise 2: working with `dplyr`
# Note that this exercise repeats the analysis from Exercise 1, but should be
# performed using `dplyr` (do not directly access or manipulate the data frames)
# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Install and load the "dplyr" library
install.packages("dplyr")
library("dplyr")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
vector1 <- select(vehicles, make)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct(vector1)
# Filter the data set for vehicles manufactured in 1997
filter1 <- filter(vehicles, year == 1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
arrange(filter1, hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
mutate(filter1, average = (hwy + cty) / 2)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vector2 <- filter(vehicles, drive == "2-Wheel Drive", hwy > 20)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
pull(filter(vector2, hwy == min(hwy)), id)
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
function1 <- function(year_choice, make_choice){
filter95 <- filter(vehicles, make == "Honda", year == 1995)
return <- pull(filter(filter95, hwy == max(hwy)), id)
return(return)
}
# What was the most efficient Honda model of 1995?
function1(1995, "Honda")
# Exercise 1: working with data frames (review)
# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
make <- vehicles[["make"]]
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(make, incomparables = FALSE)
# Filter the data set for vehicles manufactured in 1997
filter97 <- vehicles[vehicles["year"] == 1997, ]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
filter97[order(filter97$hwy), ]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
filter97["average"] <- (filter97["hwy"] + filter97["cty"]) / 2
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
more_than_twenty <- vehicles[vehicles["drive"] == "2-Wheel Drive" & vehicles["hwy"] > 20, ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
more_than_twenty[min(more_than_twenty["hwy"]), 1] #27557
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
function_1 <- function(year_choice, make_choice){
filter95 <- vehicles[vehicles["make"] == "Honda" & vehicles["year"] == 1995, ]
return <- filter95[max(filter95["hwy"]), 2]
return(return)
}
# What was the most efficient Honda model of 1995?
function_1(1995, "Honda")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
library("nycflights13")
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flights, time_changes = dep_time - sched_dep_time)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(flights, -time_changes)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flights, time_chges = dep_time - sched_dep_time)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(flights, -time_changes)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(flights, -time_chges)
# Make a histogram of the amount of time gained using the `hist()` function
?hist
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights)
# Make a histogram of the amount of time gained using the `hist()` function
hist(2)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights[2])
# Make a histogram of the amount of time gained using the `hist()` function
hist(4)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$dep_delay)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
mutate(filter1, average = (hwy + cty) / 2)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flights, time_chges = dep_time - sched_dep_time)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flights, time_chges = (dep_time - sched_dep_time))
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flights, timez = (dep_time - sched_dep_time))
df <- flights
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(df, timez = (dep_time - sched_dep_time))
mutate(df, average = (hwy + cty) / 2)
mutate(df, average = (dep_time + sched_dep_time) / 2)
source('~/Desktop/INFO201/Excercises/chapter-11-exercises/exercise-4/exercise.R', echo=TRUE)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
df2 <- select(flights, origin, destination == "SEA", time_chges)
library("nycflights13")
library("dplyr")
# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(df, timez = (dep_time - sched_dep_time))
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
df2 <- select(flights, origin, destination == "SEA", dep_delay)
flights
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(flights)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
df2 <- select(flights, origin, dest == "SEA", time_chges)
df <- flights
df
df
df
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(df, timez = (dep_time - sched_dep_time))
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(flights, -timez)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(df, timez = (dep_time - sched_dep_time))
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
df <- mutate(df, timez = (dep_time - sched_dep_time))
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(flights, -timez)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(df, -timez)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
save1 <- df %>% mutate(timez = dep_time - sched_dep_time) %>% arrange(-timez)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$timez)
# Make a histogram of the amount of time gained using the `hist()` function
hist(df$timez)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
df2 <- select(df, origin, dest == "SEA", timez)
df
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
df2 <- select(df, origin, dest == "SEA", timez)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
df2 <- select(df, origin, dest, timez)
df2
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
df2 <- select(df, origin, dest == "SEA", timez)
select(df2, dest == SEA)
select(df2, dest == "SEA)"
select(df2, dest == "SEA")
select(df2, dest == "SEA")
source('~/Desktop/INFO201/Excercises/chapter-11-exercises/exercise-4/exercise.R', echo=TRUE)
df2
rownames(df2)
colnames(df2)
df2[df2["dest"] == "SEA", ]
select(df2, dest == "SEA")
filter(df2, dest == "SEA")
# On average, did flights to SeaTac gain or loose time?
mean(df2["dest"] == "SEA")
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
df3 <- select(df, filter(origin == "JFK"), filter(dest ="SEA"), timez)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
df3 <- select(df2, filter(origin == "JFK"), filter(dest ="SEA"), timez)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
df3 <- select(df2, origin, dest, timez)
filter(df3, origin == "JFK", dest == "SEA")
df3 %>% filter(origin == "JFK", dest == "SEA")
df3 %>% filter(origin == "JFK", dest == "SEA") %>% filter(mean(timez))
df3 %>% filter(origin == "JFK", dest == "SEA") %>% select(mean(timez))
df3 %>% filter(origin == "JFK", dest == "SEA") %>% summarize(mean(timez), min(timez), max(timez))
summarize(mean(timez)
summarize(df2, mean(timez))
summarize(df2, min(timez))
